<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-12">
            <h3 class="text-center">Smart Torque Controls -> Sequence Setting</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <p class="text-center">Setting</p>
        </div>
    </div>
    <!-- Table -->
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary" id="add-sequence" data-bs-toggle="modal" data-bs-target="#add-sequence-modal" >Add Sequence</button>
            </div>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Min</th>
                        <th>Max</th>
                        <th>SCW Count</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                   
                </tbody>
            </table>
        </div>
    </div>
</div>


<!-- Add sequence modal -->
<div class="modal fade" id="add-sequence-modal" tabindex="-1" aria-labelledby="add-sequence-modal" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="add-sequence-modal" >Add Sequence</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="add-sequence-form">
            <input type="hidden" name="model_id" value="{{model_id}}">
            {{!-- Name --}}
            <div class="mb-3">
                <label for="model-name" class="form-label">Name</label>
                <input type="text" class="form-control" id="model-name" aria-describedby="model-name" name="name" minlength="3" maxlength="4">
            </div>
            {{!-- Min --}}
            <div class="mb-3">
                <label for="model-min" class="form-label">Min</label>
                <input type="number" class="form-control" id="model-min" aria-describedby="model-min" name="min" min="0" max="10000">
            </div>
            {{!-- Max --}}
            <div class="mb-3">
                <label for="model-max" class="form-label">Max</label>
                <input type="number" class="form-control" id="model-max" aria-describedby="model-max" name="max" min="0" max="10000">
            </div>
            {{!-- SCW Count --}}
            <div class="mb-3">
                <label for="model-scw-count" class="form-label">SCW Count</label>
                <input type="number" class="form-control" id="model-scw-count" aria-describedby="model-scw-count" name="scw_count">
            </div>
            <div class="mb-3">
                <label for="model-description" class="form-label">Description</label>
                <textarea class="form-control" id="model-description" name="description" rows="3"></textarea>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary btn-save">Save</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit sequence modal -->
<div class="modal fade" id="edit-sequence-modal" tabindex="-1" aria-labelledby="edit-sequence-modal" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="edit-sequence-modal" >Edit Sequence</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="edit-sequence-form">
            <input type="hidden" name="id">
            <input type="hidden" name="model_id" value="{{model_id}}">
            {{!-- Name --}}
            <div class="mb-3">
                <label for="model-name" class="form-label">Name</label>
                <input type="text" class="form-control" id="model-name" aria-describedby="model-name" name="name" minlength="3" maxlength="4">
            </div>
            {{!-- Min --}}
            <div class="mb-3">
                <label for="model-min" class="form-label">Min</label>
                <input type="number" class="form-control" id="model-min" aria-describedby="model-min" name="min" min="0" max="10000">
            </div>
            {{!-- Max --}}
            <div class="mb-3">
                <label for="model-max" class="form-label">Max</label>
                <input type="number" class="form-control" id="model-max" aria-describedby="model-max" name="max" min="0" max="10000">
            </div>
            {{!-- SCW Count --}}
            <div class="mb-3">
                <label for="model-scw-count" class="form-label">SCW Count</label>
                <input type="number" class="form-control" id="model-scw-count" aria-describedby="model-scw-count" name="scw_count">
            </div>
            <div class="mb-3">
                <label for="model-description" class="form-label">Description</label>
                <textarea class="form-control" id="model-description" name="description" rows="3"></textarea>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary btn-update">Update</button>
        </div>
    </div>
</div>

<script type="text/javascript">
   document.addEventListener('DOMContentLoaded', function() {
        const body = document.querySelector('body');
        body.addEventListener('click', async function(e) {
            // Add sequence show modal
            if(e.target.id === 'add-sequence') {
                const form = document.querySelector('#add-sequence-form');
                form.reset();
            }else
            // Add sequence
            if(e.target.classList.contains('btn-save')) {
                if(!validateForm(document.querySelector('#add-sequence-form'))) return;
                const form = document.querySelector('#add-sequence-form');
                const formData = new FormData(form);
                const response = await fetch('/model/{{model_id}}/sequence', {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.getItem('token')
                    },
                    method: 'POST',
                    body: JSON.stringify({
                        model_id: parseInt(formData.get('model_id')),
                        name: formData.get('name'),
                        description: formData.get('description'),
                        min: parseInt(formData.get('min')),
                        max: parseInt(formData.get('max')),
                        scw_count: parseInt(formData.get('scw_count'))
                    })
                });
                const data = await response.json();
                if(response.status === 200 || response.status === 201) {
                    alert('Sequence added successfully');
                    loadTable();
                    const modal = bootstrap.Modal.getInstance(document.querySelector('#add-sequence-modal'));
                    modal.hide();
                }else{
                    alert('Failed to add sequence');
                }
            }else
            // Edit sequence show modal
            if(e.target.classList.contains('btn-edit')) {
                const form = document.querySelector('#edit-sequence-form');
                const id = e.target.getAttribute('data-id');
                const response = await fetch('/model/{{model_id}}/sequence/' + id+'/show', {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.getItem('token')
                    },
                    method: 'GET'
                });
                if(response.status !== 200) {
                    alert('Failed to fetch sequence');
                    const modal = bootstrap.Modal.getInstance(document.querySelector('#edit-sequence-modal'));
                    modal.hide();
                    return;
                }

                const data = await response.json();
                form.querySelector('input[name="id"]').value = data.id;
                form.querySelector('input[name="model_id"]').value = data.model_id;
                form.querySelector('input[name="name"]').value = data.name;
                form.querySelector('input[name="min"]').value = data.min;
                form.querySelector('input[name="max"]').value = data.max;
                form.querySelector('input[name="scw_count"]').value = data.scw_count;
                form.querySelector('textarea[name="description"]').value = data.description;
            }else
            // Update sequence
            if(e.target.classList.contains('btn-update')) {
                if(!validateForm(document.querySelector('#edit-sequence-form'))) return;

                const form = document.querySelector('#edit-sequence-form');
                const formData = new FormData(form);
                const response = await fetch('/model/{{model_id}}/sequence/' + formData.get('id')+"/update", {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + localStorage.getItem('token')
                    },
                    method: 'PUT',
                    body: JSON.stringify({
                        model_id: parseInt(formData.get('model_id')),
                        name: formData.get('name'),
                        description: formData.get('description'),
                        min: parseInt(formData.get('min')),
                        max: parseInt(formData.get('max')),
                        scw_count: parseInt(formData.get('scw_count'))
                    })
                });
                const data = await response.json();
                if(response.status === 200 || response.status === 201) {
                    alert('Sequence updated successfully');
                    loadTable();
                    const modal = bootstrap.Modal.getInstance(document.querySelector('#edit-sequence-modal'));
                    modal.hide();
                }else{
                    alert('Failed to update sequence');
                }
            }
            // Delete sequence
            if(e.target.classList.contains('btn-delete')) {
                if(confirm('Are you sure you want to delete this sequence?')) {
                    const id = e.target.getAttribute('data-id');
                    const response = await fetch('/model/{{model_id}}/sequence/' + id + '/delete', {
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + localStorage.getItem('token')
                        },
                        method: 'DELETE'
                    });
                    const data = await response.json();
                    if(response.status === 200 || response.status === 201) {
                        // alert('Sequence deleted successfully');
                        loadTable();
                    }else{
                        alert('Failed to delete sequence');
                    }
                }
            }
        });

        // Load Table function

        async function loadTable() {
            const table = document.querySelector('table');
            const tbody = table.querySelector('tbody');
            const rows = tbody.querySelectorAll('tr');
            // fetch data
            const fetchData = async () => {
                const response = await fetch('/model/{{model_id}}/get-sequences');
                const data = await response.json();
                return data;
            }
            const data = await fetchData();
            // render data
            tbody.innerHTML = '';
            data.forEach((item, index) => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${item.name}</td>
                    <td>${item.description}</td>
                    <td>${item.min}</td>
                    <td>${item.max}</td>
                    <td>${item.scw_count}</td>
                    <td>
                        <button class="btn btn-primary btn-edit" data-id="${item.id}" data-bs-toggle="modal" data-bs-target="#edit-sequence-modal">Edit</button>
                        <button class="btn btn-danger btn-delete" data-id="${item.id}">Delete</button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }

        function validateForm(form) {
            const formData = new FormData(form);
            const name = formData.get('name');
            const min = parseInt(formData.get('min'));
            const max = parseInt(formData.get('max'));
            const scw_count = parseInt(formData.get('scw_count'));
            const description = formData.get('description');
            if(name.length < 3 || name.length > 4) {
                alert('Name must be between 3 and 4 characters');
                return false;
            }
            if(min < 0 || min > 10000) {
                alert('Min must be between 0 and 10000');
                return false;
            }
            if(max < 0 || max > 10000) {
                alert('Max must be between 0 and 10000');
                return false;
            }
            if(min > max) {
                alert('Min must be less than Max');
                return false;
            }
            if(scw_count < 0) {
                alert('SCW Count must be greater than 0');
                return false;
            }
            return true;
        }

        loadTable();
    });
</script>